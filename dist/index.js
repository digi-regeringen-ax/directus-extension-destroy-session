const e=["id","email","external_identifier"];var s={id:"destroy-session",handler:(s,{services:r,logger:t,getSchema:a,database:i})=>{s.use(async(e,s,r)=>e.accountability?.user?!0!==e.accountability?.admin?s.status(403).send("Forbidden"):r():s.status(401).send("Unauthenticated")),s.post("/",async(s,n)=>{try{const{UsersService:t}=r,o=new t({schema:await a(),accountability:s.accountability}),d=s.body?.by+"";if(!e.includes(d))return n.status(400).json({error:`Invalid value for param 'by' - must be one of ${e.join(", ")}`});const u=(s.body?.identifier||"")+"",c=(await o.readByQuery({filter:{[d]:{_eq:u}},fields:["id","email"],limit:1}))[0];if(!c)return n.status(404).json({error:"User not found."});const l=await i.delete().from("directus_sessions").where("user",c.id);return n.json(l)}catch(e){return t.error(e,"destroy-session error"),n.status(500).json({error:e.message||"Unknown error"})}})}};export{s as default};
